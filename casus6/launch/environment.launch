<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="rviz" default = "false"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="extra_gazebo_args" default=""/>

  <!-- Localization -->
  <arg name="3d_sensor" default="$(env TURTLEBOT_3D_SENSOR)"/>  <!-- r200, kinect, asus_xtion_pro -->
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="custom_amcl_launch_file" default="$(find turtlebot_navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/>


  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find casus_gazebo)/worlds/casus.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <include file="$(find casus_support)/launch/load_casus.launch"/>

  <!-- Start move_group -->
  <include file="$(find casus_moveit_config)/launch/move_group.launch"/>

  <!-- Spawn the URDF objects into Gazebo -->
  <include file="$(find casus_gazebo)/launch/spawn_static_world_objects.launch"/>

  <!-- Spawn the URDF obstacles objects into Gazebo -->
  <include file="$(find casus_gazebo)/launch/spawn_obstacles.launch"/>

  <include file="$(find casus_gazebo)/launch/spawn_robots.launch"/>
  <node pkg="casus_utilities" type="timed_roslaunch.sh" name="timed_roslaunch_turtlebot" output="screen"
    args="7 casus_gazebo spawn_turtlebot.launch" />

  <node pkg="casus_utilities" type="timed_roslaunch.sh" name="timed_roslaunch_parts" output="screen"
    args="7 casus_gazebo spawn_parts.launch" />

  <!-- Velocity muxer and controller for turtlebot-->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find casus_gazebo)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[/robot1/joint_states]</rosparam>
    <remap from="/joint_states" to="/combined_joint_states"/>
  </node>

  <!-- Start localization, move_base and the map server -->
  <node name="map_server" pkg="map_server" type="map_server"
    args="$(find casus6)/config/map_factory_v3.yaml" />
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml">
  </include>
  <param name="/move_base/DWAPlannerROS/xy_goal_tolerance" value="0.1" />
  <param name="/move_base/DWAPlannerROS/yaw_goal_tolerance" value="0.5" />
  <param name="/move_base/DWAPlannerROS/ylatch_xy_goal_tolerance" value="true" />
  <param name="/move_base/local_costmap/inflation_layer/inflation_radius" value="0.25"/>

  <!-- Localization AMCL -->
  <!-- Not being used
  <include file="$(arg custom_amcl_launch_file)">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  -->
  <!-- Fake localization -->
  <node pkg="fake_localization" type="fake_localization" name="fake_localization" output="screen">
    <remap from="base_pose_ground_truth" to="/ground_truth/state" />
    <param name="delta_x" value="-4.0" />
    <param name="delta_y" value="-0.2" />
    <param name="delta_yaw" value="0.0" />
    <param name="global_frame_id" value="map" />
    <param name="base_frame_id" value="base_footprint" />
  </node>

  <!-- Start RVIZ with Gazebo if necessary -->
  <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find casus_support)/config/casus.rviz"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robots_state_publisher">
    <param name="publish_frequency" type="double" value="50.0"/>
    <remap from="/joint_states" to="/combined_joint_states"/>
  </node>
  <!-- added by gerard -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom" args="-0.001 -0.000 -0.010 -0.000 -0.007 -0.003 1.000 map odom"/>

  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_world" args="4.0 0.2 0 0 0 0 1 map world"/>

</launch>
